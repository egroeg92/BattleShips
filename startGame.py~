import pickle

import pygame, pygbutton, sys
from pygame.locals import *
from socket import *
import threading
import Matchup
from Board import Board
from Ship import Ship
from PlayerState import PlayerState
from Game import Game

from Coral import Coral
from Square import Square
from reefGeneration import reefGeneration

FPS = 30
WINDOWWIDTH = 1250
WINDOWHEIGHT = 700

WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
BLACK = (0, 0, 0, 0.8)
DARKGRAY = (20,20,20)
GRAY = (70,70,70)

global moveValid
moveValid = False
global positionValid
positionValid = False
global  VISIBLE
VISIBLE = True

FONT = pygame.font.SysFont("Arial", 14)
TITLEFONT = pygame.font.SysFont("Arial",20)
d = 15

def drawMessagePanel(screen, turn):
    
    if turn:
        color = pygame.Color(194, 242, 221) #green
    else:
        color = pygame.Color(250, 200, 200) #red
    
    pygame.draw.rect(screen, color, [670, 10,550, 100])

def drawStatPanel(screen, shiplist, op_shiplist):
    
    pygame.draw.rect(screen, WHITE, [670, 130, 550, 200])
    
    
    count = [0,0,0,0,0,0,0]
    for ship in shiplist:
        if sum(ship.getHealth()) != 0:
            if ship.getSubclass() == 'Cruiser':
                count[0] = count[0] + 1
            elif ship.getSubclass() == 'Destroyer':
                count[1] = count[1] + 1
            elif ship.getSubclass() == 'TorpedoBoat':
                count[2] = count[2] + 1
            elif ship.getSubclass() == 'RadarBoat':
                count[3] = count[3] + 1
            elif ship.getSubclass() == 'MineLayer':
                count[4] = count[4] + 1
            elif ship.getSubclass() == 'Kamikaze':
                count[5] = count[5] + 1
            
    pygame.draw.rect(screen, DARKGRAY, [670, 130, 550, 30])
    screen.blit(TITLEFONT.render("OVERVIEW", 1, WHITE),(900,135))

    screen.blit(TITLEFONT.render("YOUR SHIPS:", 1, BLACK),(750,170))

    screen.blit(FONT.render("Cruiser x"+str(count[0]), 1, BLACK),(750,200))
    screen.blit(FONT.render("Destroyer x"+str(count[1]), 1, BLACK),(750,220))
    screen.blit(FONT.render("TorpedoBoat x"+str(count[2]), 1, BLACK),(750,240))
    screen.blit(FONT.render("RadarBoat x"+str(count[3]), 1, BLACK),(750,260))
    screen.blit(FONT.render("MineLayer x"+str(count[4]), 1, BLACK),(750,280))
    screen.blit(FONT.render("Kamikaze x"+str(count[5]), 1, BLACK),(750,300))
    
    ocount = [0,0,0,0,0,0,0]
    for ship in op_shiplist:
        if sum(ship.getHealth()) != 0:
            if ship.getSubclass() == 'Cruiser':
                ocount[0] = ocount[0] + 1
            elif ship.getSubclass() == 'Destroyer':
                ocount[1] = ocount[1] + 1
            elif ship.getSubclass() == 'TorpedoBoat':
                ocount[2] = ocount[2] + 1
            elif ship.getSubclass() == 'RadarBoat':
                ocount[3] = ocount[3] + 1
            elif ship.getSubclass() == 'MineLayer':
                ocount[4] = ocount[4] + 1
            elif ship.getSubclass() == 'Kamikaze':
                ocount[5] = ocount[5] + 1
    screen.blit(TITLEFONT.render("ENEMY SHIPS:", 1, BLACK),(1000,170))

    screen.blit(FONT.render("Cruiser x"+str(ocount[0]), 1, BLACK),(1000,200))
    screen.blit(FONT.render("Destroyer x"+str(ocount[1]), 1, BLACK),(1000,220))
    screen.blit(FONT.render("TorpedoBoat x"+str(ocount[2]), 1, BLACK),(1000,240))
    screen.blit(FONT.render("RadarBoat x"+str(ocount[3]), 1, BLACK),(1000,260))
    screen.blit(FONT.render("MineLayer x"+str(ocount[4]), 1, BLACK),(1000,280))
    screen.blit(FONT.render("Kamikaze x"+str(ocount[5]), 1, BLACK),(1000,300))

def drawSelectedPanel(screen, shiplist):
    pygame.draw.rect(screen, WHITE, [670, 350, 550, 300])
    pygame.draw.rect(screen, DARKGRAY, [670, 350, 550, 30])
    screen.blit(TITLEFONT.render("OPTIONS", 1, WHITE),(900,355))
    
    for s in shiplist:
        if s.isSelected():
            screen.blit(TITLEFONT.render(s.getSubclass(), 1, BLACK),(700,400))

            screen.blit(FONT.render("Size: "+str(s.getSize()), 1, BLACK),(700,440))
            screen.blit(FONT.render("Orientation: "+s.getOrientation(), 1, BLACK),(700,460))
            screen.blit(FONT.render("Health: "+str(s.getHealth()), 1, BLACK),(700,480))
            screen.blit(FONT.render("Radar Range: "+str(s.getRadarX()), 1, BLACK),(700,500))
            screen.blit(FONT.render("Speed: "+str(s.getSpeed()), 1, BLACK),(700,520))
            screen.blit(FONT.render("Armour: "+str(s.getArmour()), 1, BLACK),(700,540))

            if (s.getTurnRadius() == 1) :
                screen.blit(FONT.render("Turn Radius: 90 deg", 1, BLACK),(700,560))
            else :
                screen.blit(FONT.render("Turn Radius: 180 deg", 1, BLACK),(700,560))
            
            screen.blit(FONT.render("Weapons: ", 1, BLACK),(860,440))
            y = 440
            for w in s.getWeaponList():
                screen.blit(FONT.render(w.getName(), 1, BLACK),(930,y))
                y = y + 20
                
            if s.getSubclass() == 'MineLayer':
                screen.blit(FONT.render("Remaining mines: " +str(s.getMineCount()), 1, BLACK),(860,y))
            return
        
    
    screen.blit(FONT.render("No ship selected", 1, BLACK),(900,510))
        
#             screen.blit(FONT.render("RadarBoat x"+str(ocount[3]), 1, BLACK),(1000,550))
#             screen.blit(FONT.render("MineLayer x"+str(ocount[4]), 1, BLACK),(1000,570))
#             screen.blit(FONT.render("Kamikaze x"+str(ocount[5]), 1, BLACK),(1000,590))



def listener(clientsocket,screen):
    global active
    global turn
    global op_positioned
    # global turnType
    while True:
        data = clientsocket.recv(1024)
        print 'Active Game data recv ' +str(data)
        # screen.fill(GRAY)  # Put this here temporarily to see the output
        #pygame.draw.rect(screen, BLACK, [100, 650 , 500, 50])
        drawMessagePanel(screen, turn)
        # updateBoard(game.getBoard(),screen)

        if data == 'Win':
            print 'winner'
            active = False
            # Matchup.start(clientsocket,'username')

            break
        if data == 'Lose':
            print 'loser'
            # Matchup.start(clientsocket,'username')

            active = False
            break
        dataList = []

        dataList = data.split(':')
        if dataList[0] == 'Move':
            
            ship = op_shiplist[int(dataList[1])]

            x = int(dataList[2])
            y = int(dataList[3])
            vis = dataList[4]
            ship.setSelected(True)
            
            if vis == 'True':
                game.moveShip(x,y,True)
                game.getBoard().setNot(-1,-1,screen)
                updateBoard(game.getBoard(),screen)
            else:
                game.moveShip(x,y,False)
                
                string =  'collision at '+ str(x)  +' ' +str(y)
                notifier = FONT.render(string, 1, BLACK)
                screen.blit(notifier, (750,50))               
                game.getBoard().setNot(x,y,screen)
                updateBoard(game.getBoard(),screen)


            ship.setSelected(False)
            # ship.move(int(dataList[2]))
            turn = True
        
        elif dataList[0] == 'Turn':
            #print'turning'
            ship = op_shiplist[int(dataList[1])]
            rot = int(dataList[2])
            degree = dataList[3]
            vis = dataList[4]

            if degree =='True':
                if vis == 'True':
                    game.rotate(ship,rot,True,True)
                    game.getBoard().setNot(-1,-1,screen)
                    updateBoard(game.getBoard(),screen)
                else:
                    game.rotate(ship,rot,True,False)
                    string =  'collision at '+ str(x) +' ' +str(y)
                    notifier = FONT.render(string, 1, BLACK)
                    screen.blit(notifier, (750,50))
                    game.getBoard().setNot(x,y,screen)
                    updateBoard(game.getBoard(),screen)
                
            else:
                if vis == 'True':
                    game.getBoard().setNot(-1,-1,screen)                    
                    game.rotate(ship,rot,False,True)
                else:
                    game.rotate(ship,rot,False,False)
                    string =  'collision at '+ str(x)  +' ' +str(y)
                    notifier = FONT.render(string, 1, BLACK)
                    screen.blit(notifier, (750,50))
                    updateBoard(game.getBoard(),screen)
                    game.getBoard().setNot(x,y,screen)

            turn = True
        
        elif dataList[0] == 'Cannon':
            #print 'cannon'

            ship = op_shiplist[int(dataList[1])]
            x = int(dataList[2])
            y = int(dataList[3])
            ship.setSelected(True)
            resultString = game.fireCannon(x,y)
            # resultString = resultString.split(':')
            resultString = resultString +' x = ' + str(x) +' y = ' + str(y)

            print resultString

            notifier = FONT.render(resultString, 1, BLACK)
            ship.setSelected(False)
            screen.blit(notifier,(750,50))
            game.getBoard().setNot(x,y,screen)
            updateBoard(game.getBoard(),screen)

            turn = True

        elif dataList[0] == 'HCannon':
            #print 'heavycannon'
            ship = op_shiplist[int(dataList[1])]
            x = int(dataList[2])
            y = int(dataList[3])
            ship.setSelected(True)
            resultString = game.fireHeavyCannon(x,y)
            # resultString = resultString.split(':')
            # resultString = resultString
            resultString = resultString +' x = ' + str(x) +' y = ' + str(y)

            print resultString

            
            notifier = FONT.render(resultString, 1,BLACK)
            ship.setSelected(False)
            screen.blit(notifier, (750,50))
            game.getBoard().setNot(x,y,screen)
            updateBoard(game.getBoard(),screen)

            turn = True
        elif dataList[0] == 'Torpedo':
            #print 'torpedo'
            ship = op_shiplist[int(dataList[1])]
            x = int(dataList[2])
            y = int(dataList[3])
            ship.setSelected(True)
            game.fireTorpedo
            resultString = game.fireTorpedo(x,y)

            print resultString
            # resultString = resultString.split(':')
            # resultString = resultString
            
            resultString = resultString +' x = ' + str(x) +' y = ' + str(y)

            print resultString



            notifier = FONT.render(resultString, 1, BLACK)
            ship.setSelected(False)
            screen.blit(notifier, (750,50))
            game.getBoard().setNot(x,y,screen)
            updateBoard(game.getBoard(),screen)

            turn = True

        else:
            dataList = data[1:-1]
            dataList = dataList.replace(' ','')
            dataList = dataList.replace('\'','')
            dataList = dataList.split(',')
            #print dataList
            
            if dataList[0] == 'Position':
                dataList = dataList[:-2]
                #print 'position'
                #print 'dataList',dataList
                dataList.reverse()
                #print 'dataList R',dataList
                #print len(dataList)
                # dataList.pop()

                while len(dataList) >0:
                    dataList.pop()
                    ship = op_shiplist[int(dataList.pop())]
                    #print "SHIP NAME"+str(ship.getSubclass())
                    x = int(dataList.pop())
                    y = int(dataList.pop())
                    d = dataList.pop()
                    ship.setSelected(True)
                    if Player1: #then positioning player 2
                        if d == 'W':
                            p =0
                        elif d =='N':
                            p =1
                        elif d =='E':
                            p =2
                        elif d == 'S':
                            p = 3
                    else:
                        if d == 'E':
                            p = 0
                        elif d =='S':
                            p =1
                        elif d =='W':
                            p =2
                        elif d =='N':
                            p = 3

                    game.positionShip(x, y, p)
                    ship.setSelected(False)

                op_positioned = True

        
def main(clientsocket, opp,user,player,corallist):
    
    # for offine play (for debugging)

    global offline
    offline = False
    if clientsocket == 'offline':
        offline = True

    # True if this client is player 1
    global Player1
    
    Player1 = False
    if player:
        Player1 = True
        print 'PLAYER 1!!!!!!!!'
    else:
        print 'PLAYER 2!!!!!!!!'

    # true if the op has placed there ships
    global op_positioned 
    op_positioned = False

    ## creating the screen

    screen = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))
    pygame.display.set_caption('Battle Ships')
    
    ## Game object

    global game
    if not offline:
    	game = Game(Player1, []) 

    	reeflist = corallist
       	reeflist = reeflist.replace("[",'')
        reeflist = reeflist.replace("]",'')
        reeflist = reeflist.replace(" ",'')
        reeflist = reeflist.replace('),(',')||(')
        reeflist = reeflist.split('||')
            
        print reeflist
        game.setCoral(reeflist)
        for i in reeflist:
            z = i.replace('(','')
            z = z.replace(')','')
            x = int(z.split(',')[0])    
                
            y = int(z.split(',')[1])
            c = Coral()
            sq = Square(c,(x,y))
            game.getBoard().setSquare(x,y, sq)
        screen.fill(BLACK);
        updateBoard(game.getBoard(),screen)
        
        
        print 'reef'


    else:
    	reeflist = []
    	game = Game(Player1, reeflist) 
    	reefGenerator = reefGeneration()
    	game.updateReef(reefGenerator,reeflist,game.getCoral())
    	game.setCoral(reeflist)
    	for (x,y) in reeflist:
	    	c = Coral()
	    	sq = Square(c,(x,y))
	    	game.getBoard().setSquare(x,y, sq)
		screen.fill(BLACK);
		updateBoard(game.getBoard(),screen)
    #     if not offline:
    #         clientsocket.send("Reef:"+str(corallist))
    # else:
    #     game = Game(Player1, corallist)

    global colx
    global coly

    # colx = -1
    # coly = -1

    ## creating the button objects

    buttonRotate = pygbutton.PygButton((1090, 400, 120, 30), 'Rotate Ship')
    buttonPositionShips = pygbutton.PygButton((1040, 610, 170, 30), 'Done Positioning Ships')

    buttonMove = pygbutton.PygButton((1090, 400, 120, 30), 'Move Ship')
    buttonTurn = pygbutton.PygButton((1090, 440, 120, 30), 'Turn Ship')
    buttonFire = pygbutton.PygButton((1090, 480, 120, 30), 'Fire Weapon')
    kbuttonFire = pygbutton.PygButton((1090, 520, 120, 30), 'Arm Explosives')
    
    shipOptions = [buttonMove, buttonTurn, buttonFire]
    kshipOptions = [buttonMove, kbuttonFire]
    positionOptions = [buttonRotate]

    buttonCannon = pygbutton.PygButton((1090, 400, 120, 30), 'Cannon')
    buttonHeavyCannon = pygbutton.PygButton((1090, 440, 120, 30), 'HeavyCannon')
    buttonTorpedo = pygbutton.PygButton((1090, 480, 120, 30), 'Torpedo')
  
    buttonSave = pygbutton.PygButton((960, 660, 120, 30), 'Save Game')
    buttonExit = pygbutton.PygButton((1090, 660, 120, 30), 'Quit')
    
    #messages
    
    
    ## start the listener thread if playing not offline

    if not offline:
        l_thread = threading.Thread(target = listener, args = (clientsocket,screen))
        l_thread.start()

    ## game active

    global active
    active = True

    ## turn is true if its your turn, false if its the opponents turn

    global turn
    
    global shiplist
    global op_shiplist
    
    shiplist = []
    op_shiplist = []
    
    shiplist = game.getCurrentPlayer().getShipList()
    op_shiplist = game.getOpponent().getShipList()

    turn = True

    global turnType
    turnType = "position"
    
    global armKamikaze
    armKamikaze = False

    global positioned 
    positioned = False
    
    global positionRotation
    positionRotation = 0

    global resultString
    resultString = ""

    ## booleans for what kind of weapon options to display (initiated to none)
    cannon = False
    torpedo = False
    hcannon = False 

    screen.fill(GRAY)
    drawStatPanel(screen, shiplist, op_shiplist)
    drawSelectedPanel(screen, shiplist)
    drawMessagePanel(screen, turn)
    #gamestats

    positiontext = FONT.render("Click on your ships to position them.", 1, BLACK)
    positiontext1 = FONT.render("(You can only position ships on your side of the board.)", 1, BLACK)

#####################################################
##                                                 ##
##              MAIN GAME LOOP                     ##
##                                                 ##
#####################################################
    while True:
        
        if active != True:
            break

        ## if offline its always your turn, (for debugging)
        if offline:
            turn = True

        ## Player 1 always has first turn 
        if Player1 and op_positioned == True and turnType == "":
            turn = True
            op_positioned = False
        
        ## can only quit if its your turn
        drawMessagePanel(screen, turn)  
        drawSelectedPanel(screen, shiplist)
        drawStatPanel(screen, shiplist, op_shiplist)
      
        if turn:
            buttonExit.draw(screen)
            buttonSave.draw(screen)

            if not positioned:
                screen.blit(positiontext, (850, 40))
                screen.blit(positiontext1, (780, 60))
                buttonPositionShips.draw(screen)
        
        else:
            updateBoard(game.getBoard(),screen)


        game.getBoard().animate(screen,(pygame.time.get_ticks()/500)%2)
        

        ## draw the ships
        for s in shiplist:
            if (s.isSelected() and positioned and s.getSubclass() != 'Kamikaze'):
                screen.fill(GRAY)  # Put this here temporarily to see the output
                for o in shipOptions:
                    o.draw(screen)
            elif (s.isSelected() and positioned and s.getSubclass() == 'Kamikaze'):
                screen.fill(GRAY)  # Put this here temporarily to see the output
                for o in kshipOptions:
                    o.draw(screen)
        
        
        if (turnType == "positionActive"):
            for s in shiplist:
                if (s.isSelected() and s.getSubclass() != "Kamikaze"):
                    for o in positionOptions:
                        o.draw(screen)
                
            

        ## if firing
        if (turnType == "fire"):
            screen.fill(GRAY);
            buttons = []
            for ship in shiplist:
                if ship.isSelected():
                    cannon = False
                    torpedo = False
                    hcannon = False    
                    weaponList = ship.getWeaponList()
                    
                    for weapon in weaponList:
                        if weapon.getSubclass() == "Cannon":
                            buttons.append(buttonCannon)
                            cannon = True
                        if weapon.getSubclass() == "HeavyCannon":
                            buttons.append(buttonHeavyCannon)
                            hcannon = True
                        if weapon.getSubclass() == "Torpedo":
                            buttons.append(buttonTorpedo)
                            torpedo = True
            for button in buttons:
                button.draw(screen)


########################################################
##                                                    ##
##                    EVENT LOOP                      ##
##                                                    ##
########################################################  

        for event in pygame.event.get():

            ## set isSelected to True if a ship isSelected
            isKamikaze = False;
            for ship in shiplist:
                isSelected = True
                if ship.isSelected():
                    if ship.getSubclass() == 'Kamikaze':
                        isKamikaze = True;
                    break
                isSelected = False

            ## Events only matter if its the clients turn
            if turn:

                ##  QUITTING
                buttonExit.draw(screen)

                if 'click' in buttonExit.handleEvent(event) and (turnType == '' or turnType == 'position'):
                    print 'quit'
                    if offline:
                        sys.exit();
                    else:
                        clientsocket.send("LoseGame")
                        clientsocket.send("WinGame")

                ## MOVING

                if turnType == "move":
                    if event.type == pygame.MOUSEMOTION:
                        # game.getBoard().animate(screen,(pygame.time.get_ticks()/500)%2)

                        for ship in shiplist:
                            if ship.isSelected():
                                
                                x, y = event.pos
                                x = (x - d) / 21
                                y = (y - 10) / 21
                                
                                
                                game.getBoard().paint(screen)
                                
                         
                                if ship.getOrientation() == "E":
                                    if x >= (ship.getSize()-1) and x <= 29 and y >= 0 and y <= 29:
                                        drawShip(screen, ship, x, y, 0, game,screen)
                                        
                                elif ship.getOrientation() == "W":
                                    if x <= 29 - ship.getSize() + 1 and x >= 0 and y >= 0 and y <= 29:
                                        drawShip(screen, ship, x, y, 0, game,screen)
                                
                                elif ship.getOrientation() == "S":
                                    if x >= 0 and x <= 29 and y >= ship.getSize() - 1 and y <= 29:
                                        drawShip(screen, ship, x, y, 0, game,screen)
                                        
                                elif ship.getOrientation() == "N":
                                    if x >= 0 and x <= 29 and y >= 0 and y <= 29 - ship.getSize() + 1:
                                        drawShip(screen, ship, x, y, 0, game,screen)
             
                    elif event.type == pygame.MOUSEBUTTONUP: 
                        for ship in shiplist:
                            if ship.isSelected():
                                if moveValid:
                                    x, y = event.pos
                                    x = (x - d) / 21
                                    y = (y - 10) / 21
                                    

                                    if ship.getOrientation() == "E":
                                        if x >= (ship.getSize()-1) and x <= 29 and y >= 0 and y <= 29:
                                            if VISIBLE:
                                                #print "move"
                                                game.moveShip(x, y, True)
                                                
                                                if (armKamikaze):
                                                    ship.setSelected(True)
                                                    game.detonateKamikaze()
                                                    
                                                if not offline:
                                                    clientsocket.send('Move:'+str(shiplist.index(ship))+':'+str(x)+':'+str(y)+':True')
                                                    turn = False
                                            else:
                                                game.moveShip(x, y, False)
                                                print "COLLISION"


                                                string =  'collision at '+ str(x) +str(y)
                                                notifier = FONT.render(string, 1, (255,255,255))
                                                screen.blit(notifier, (200, WINDOWHEIGHT - 100))
                                                updateBoard(game.getBoard(),screen)

                                                print "CO",colx,coly
                                                if not offline:
                                                    clientsocket.send('Move:'+str(shiplist.index(ship))+':'+str(colx)+':'+str(coly)+':False')
                                                    turn = False
                                    
                                    elif ship.getOrientation() == "W":
                                        if x <= 29 - ship.getSize() and x >= 0 and y >= 0 and y <= 29:
                                            if VISIBLE:
                                                #print "move"
                                                game.moveShip(x, y, True);
                                                if not offline:
                                                    clientsocket.send('Move:'+str(shiplist.index(ship))+':'+str(x)+':'+str(y)+':True')
                                                    turn = False
                                            else:
                                                print "COLLISION"

                                                game.moveShip(x, y, False)
                                                string =  'collision at '+ str(x) +str(y)
                                                notifier = FONT.render(string, 1, (255,255,255))
                                                screen.blit(notifier, (200, WINDOWHEIGHT - 100))
                                                updateBoard(game.getBoard(),screen)

                                                print "CO",colx,coly
                                                if not offline:
                                                    clientsocket.send('Move:'+str(shiplist.index(ship))+':'+str(colx)+':'+str(coly)+':False')
                                                    turn = False
                                    elif ship.getOrientation() == "S":
                                        back_postion = ship.getPositionList()[-1]
            
                                        if x >= 0 and x <= 29 and y > back_postion[1] and y <= 29:
                                            if VISIBLE:
                                                #print "move"
                                                game.moveShip(x, y, True);
                                                if not offline:
                                                    clientsocket.send('Move:'+str(shiplist.index(ship))+':'+str(x)+':'+str(y)+':True')
                                                    turn = False
                                            else:
                                                print "COLLISION"

                                                game.moveShip(x, y, False)
                                                string =  'collision at '+ str(x) +str(y)
                                                notifier = FONT.render(string, 1, (255,255,255))
                                                screen.blit(notifier, (200, WINDOWHEIGHT - 100))
                                                updateBoard(game.getBoard(),screen)

                                                if not offline:
                                                    clientsocket.send('Move:'+str(shiplist.index(ship))+':'+str(colx)+':'+str(coly)+':False')
                                                    turn = False

                                    elif ship.getOrientation() == "N":
                                        if x >= 0 and x <= 29 and y >= 0 and y <= 29-ship.getSize():
                                            if VISIBLE:
                                                #print "move"
                                                game.moveShip(x, y, True);
                                                if not offline:
                                                    clientsocket.send('Move:'+str(shiplist.index(ship))+':'+str(x)+':'+str(y)+':True')
                                                    turn = False

                                            else:
                                                game.moveShip(x, y, False)
                                                print "COLLISION"

                                                string =  'collision at '+ str(x) +str(y)
                                                notifier = FONT.render(string, 1, (255,255,255))
                                                screen.blit(notifier, (200, WINDOWHEIGHT - 100))
                                                updateBoard(game.getBoard(),screen)

                                            if not offline:
                                                clientsocket.send('Move:'+str(shiplist.index(ship))+':'+str(colx)+':'+str(coly)+':False')
                                                turn = False
                               
                                


                ## POSITIONING 

                elif turnType == "positionActive":
                    if event.type == pygame.MOUSEMOTION:
                        for ship in shiplist:
                            if ship.isSelected():
                                x, y = event.pos
                                x = (x - d) / 21
                                y = (y - 10) / 21
                                
                                newOrientation = ship.getOrientation()
                                rotation = positionRotation

                                while (rotation > 0):
                                    if (newOrientation == "E"):
                                        newOrientation = "S"
                                        rotation = rotation - 1
                                    elif (newOrientation == "S"):
                                        newOrientation = "W"
                                        rotation = rotation - 1
                                    elif (newOrientation == "W"):
                                        newOrientation = "N"
                                        rotation = rotation - 1
                                    elif (newOrientation == "N"):
                                        newOrientation = "E"
                                        rotation = rotation - 1
                                        
                                game.getBoard().paint(screen)
                                moveValid = False
                                
                                if newOrientation == "E":
                                    if x >= (ship.getSize()-1) and x <= 29 and y >= 0 and y <= 29:
                                        drawShip(screen, ship, x, y, positionRotation, game,screen)
                                        
                                elif newOrientation == "W":
                                    if x <= 29 - ship.getSize()+1 and x >= 0 and y >= 0 and y <= 29:
                                        drawShip(screen, ship, x, y, positionRotation, game,screen)
                                
                                elif newOrientation == "S":        
                                    if x >= 0 and x <= 29 and y >= ship.getSize() - 1 and y <= 29:
                                        drawShip(screen, ship, x, y, positionRotation, game,screen)
                                        
                                elif newOrientation == "N":
                                    if x >= 0 and x <= 29 and y >= 0 and y <= (29 - ship.getSize() + 1):
                                        drawShip(screen, ship, x, y, positionRotation, game,screen)  
                                                   
                    elif "click" in buttonRotate.handleEvent(event) and turnType == 'positionActive':
                        for ship in shiplist:
                            if ship.isSelected():
                                old = positionRotation
                                positionRotation = old + 1
                                
                                if positionRotation == 4:
                                    positionRotation = 0

                                screen.fill(GRAY);
                                
                    elif event.type == pygame.MOUSEBUTTONUP: 
                        for ship in shiplist:
                            if ship.isSelected():
                                if moveValid:
                                    x, y = event.pos
                                    x = (x - d) / 21
                                    y = (y - 10) / 21

                                    
                                    game.positionShip(x, y, positionRotation);

                                    ship.setSelected(False)

                                    turnType = "position"
                                    positionRotation = 0
                                    
                                    screen.fill(GRAY);

                ##  TURNING

                elif turnType == "turn":

                    if event.type == pygame.MOUSEMOTION:
                        for ship in shiplist:
                            if ship.isSelected():            

                                x, y = event.pos
                                x = (x - d) / 21
                                y = (y - 10) / 21

                                game.getBoard().paint(screen)
                                if ship.getTurnRadius() == 1:
                                    if ship.getOrientation() == 'E' :

                                        if x >= ship.getPositionList()[-1][0] and x <=29 and y > ship.getPositionList()[-1][1] and y <= 29:
                                            drawShip(screen, ship, x, y+(ship.getSize()-2), 1, game,screen)
                                            rot = 1 
                                        elif x >= ship.getPositionList()[-1][0] and x <=29 and y < ship.getPositionList()[-1][1] and y >= ship.getSize() - 2:
                                            drawShip(screen, ship, x, y-(ship.getSize()-2), 3, game,screen)
                                            rot = 3
                                    elif ship.getOrientation() == 'W' :
                                        #print 'Turn west',y, ship.getPositionList()[0][1]

                                        if y > ship.getPositionList()[0][1] and y- ship.getSize() +2 >= 0    and y <=29-ship.getSize()+2 and x>=0 and x<=29:
                                            drawShip(screen, ship, x, y+(ship.getSize()-2), 3, game,screen)
                                            rot = 3
                                             
                                        elif y< ship.getPositionList()[0][1]and y - ship.getSize() +2  >= 0    and y <=29-ship.getSize()+2 and x>=0 and x<=29:
                                            drawShip(screen, ship, x, y-(ship.getSize()-2), 1, game,screen)
                                            rot = 1

                                    elif ship.getOrientation() == 'S' :
                                        #print 'Turn south',x, ship.getPositionList()[0][0]

                                        if x >= ship.getPositionList()[0][0] and x <=29-ship.getSize()+2 and y>=0 and y<=29:
                                            drawShip(screen, ship, x+(ship.getSize()-2), y, 3, game,screen)
                                            rot = 3
                                             
                                        elif x< ship.getPositionList()[0][0]and x - ship.getSize() +2  >= 0    and x <=29-ship.getSize()+2 and y>=0 and y<=29:
                                            drawShip(screen, ship, x -(ship.getSize()-2), y, 1, game,screen)
                                            rot = 1

                                    elif ship.getOrientation() == 'N' :
                                        #print 'Turn North',x, ship.getPositionList()[0][0]

                                        if x > ship.getPositionList()[0][0] and x <=29-ship.getSize()+2 and y>=0 and y<=29:
                                            drawShip(screen, ship, x +(ship.getSize()-2), y, 1, game,screen)
                                            rot = 1
                                             
                                        elif x< ship.getPositionList()[0][0] and x - ship.getSize() +2  >= 0    and x <=29-ship.getSize()+2 and y>=0 and y<=29:
                                            drawShip(screen, ship, x-(ship.getSize()-2), y, 3, game,screen)
                                            rot = 3
                    
                    # For ships that can turn 180
                                if ship.getTurnRadius() == 2:
                                    if ship.getOrientation() == 'E' :
                                        middlex = ship.getPositionList()[1][0]
                                        if y > ship.getPositionList()[0][1] and x> middlex-1 and y- ship.getSize() +2 >= 0    and y <=29-ship.getSize()+2 and x>=0 and x<=29:
                                            drawShip(screen, ship, x, y+(ship.getSize()-3), 1, game,screen)
                                            rot = 1 
                                        elif y< ship.getPositionList()[0][1] and x> middlex-1  and y - ship.getSize() +2  >= 0    and y <=29-ship.getSize()+2 and x>=0 and x<=29:
                                            drawShip(screen, ship, x, y-(ship.getSize()-3), 3, game,screen)
                                            rot = 3
                                        elif y - ship.getSize() +2  >= 0    and y <=29-ship.getSize()+2 and x>=0 and x<=29 :
                                            drawShip(screen,ship,x,y,2,game,screen)
                                            rot = 2

                                    if ship.getOrientation() == 'W' :
                                        middlex = ship.getPositionList()[1][0]
                                        if y > ship.getPositionList()[0][1] and x <middlex+1 and y- ship.getSize() +2 >= 0    and y <=29-ship.getSize()+2 and x>=0 and x<=29:
                                            drawShip(screen, ship, x, y+(ship.getSize()-3), 3, game,screen)
                                            rot = 3
                                             
                                        elif y< ship.getPositionList()[0][1] and x<middlex+1 and y - ship.getSize() +2  >= 0    and y <=29-ship.getSize()+2 and x>=0 and x<=29:
                                            drawShip(screen, ship, x, y-(ship.getSize()-3), 1, game,screen)
                                            rot = 1
                                        elif y - ship.getSize() +2  >= 0    and y <=29-ship.getSize()+2 and x>=0 and x<=29 :
                                            drawShip(screen,ship,x,y,2,game,screen)
                                            rot = 2

                                    elif ship.getOrientation() == 'S' :
                                        middley = ship.getPositionList()[1][1]

                                        if x > ship.getPositionList()[0][0] and y > middley -1 and x- ship.getSize() +2 >= 0    and x <=29-ship.getSize()+2 and y>=0 and y<=29:
                                            drawShip(screen, ship, x+(ship.getSize()-3), y, 3, game,screen)
                                            rot = 3
                                             
                                        elif x< ship.getPositionList()[0][0] and y > middley -1 and x - ship.getSize() +2  >= 0    and x <=29-ship.getSize()+2 and y>=0 and y<=29:
                                            drawShip(screen, ship, x -(ship.getSize()-3), y, 1, game,screen)
                                            rot = 1
                                        elif x- ship.getSize() +2 >=0 and x <= 29-ship.getSize() +2 and y >=0 and y <=29:
                                            drawShip(screen,ship,x,y,2,game,screen)
                                            rot = 2

                                    elif ship.getOrientation() == 'N' :
                                        middley = ship.getPositionList()[1][1]

                                        if x > ship.getPositionList()[0][0] and y < middley +1 and x- ship.getSize() +2 >= 0    and x <=29-ship.getSize()+2 and y>=0 and y<=29:
                                            drawShip(screen, ship, x +(ship.getSize()-3), y, 1, game,screen)
                                            rot = 1
                                             
                                        elif x< ship.getPositionList()[0][0] and y < middley +1 and x - ship.getSize() +2  >= 0    and x <=29-ship.getSize()+2 and y>=0 and y<=29:
                                            drawShip(screen, ship, x-(ship.getSize()-3), y, 3, game,screen)
                                            rot = 3

                                        elif x- ship.getSize() +2 >=0 and x <= 29-ship.getSize() +2 and y >=0 and y <=29:
                                            drawShip(screen,ship,x,y,2,game,screen)
                                            rot = 2


                    
                    elif event.type == pygame.MOUSEBUTTONUP: 
                        for ship in shiplist:
                            if ship.isSelected():
                                if moveValid:
                                    x, y = event.pos
                                    x = (x - d) / 21
                                    y = (y - 10) / 21
                                    if ship.getTurnRadius() == 1:
                                        #TODO, Client socket takes in  more arguments

                                        if VISIBLE:
                                            game.rotate(ship,rot,True, True)
                                            if not offline:
                                                clientsocket.send('Turn:'+str(shiplist.index(ship))+':'+str(rot)+':True:True')
                                                turn = False
                                        else:
                                            game.rotate(ship, rot, True, False)

                                            print "COLLISION"

                                            string =  'turn collision at '+ str(x) +str(y)
                                            notifier = FONT.render(string, 1, (255,255,255))
                                            screen.blit(notifier, (200, WINDOWHEIGHT - 100))
                                            updateBoard(game.getBoard(),screen)

                                            if not offline:
                                                clientsocket.send('Turn:'+str(shiplist.index(ship))+':'+str(rot)+':True:False')
                                                turn = False
                                    
                                    elif ship.getTurnRadius() == 2:

                                        if VISIBLE:
                                            game.rotate(ship,rot,False, True)
                                            if not offline:
                                                clientsocket.send('Turn:'+str(shiplist.index(ship))+':'+str(rot)+':True:True')
                                                turn = False

                                        else:
                                            game.rotate(ship, rot, False, False)
                                            
                                            print "COLLISION"
                                            string =  'turn collision at '+ str(x) +str(y)
                                            notifier = FONT.render(string, 1, (255,255,255))
                                            screen.blit(notifier, (200, WINDOWHEIGHT - 100))
                                            updateBoard(game.getBoard(),screen)

                                            if not offline:
                                                clientsocket.send('Turn:'+str(shiplist.index(ship))+':'+str(rot)+':True:False')
                                                turn = False

                                ship.setSelected(False)
                                turnType = ""
                                screen.fill(GRAY);

                ## FIRING CANNON

                elif turnType == "cannon":                    
                    if event.type == pygame.MOUSEMOTION:
                        x, y = event.pos
                        x = (x - d) / 21
                        y = (y - 10) / 21

                        for ship in shiplist:
                            if ship.isSelected():
                                
                                game.getBoard().paint(screen)
                                if (x,y) in ship.getCannonRange():
                                    drawWeapon(screen, x, y)
                    
                    elif event.type == pygame.MOUSEBUTTONUP:
                        for ship in shiplist:
                            if ship.isSelected():
                                x, y = event.pos
                                x = (x - d) / 21
                                y = (y - 10) / 21
                                crange = firingRange(screen, ship, x, y, "Cannon")
                                
                                if moveValid and x>=0 and x<=29 and y>=0 and y<=29:
                                    resultString = game.fireCannon(x,y)
                                    resultString = resultString.split(':')
                                    if resultString[0] == 'ship sunk ':
                                        resultString = resultString[0]+':'+resultString[1]+'at '+str(x)+' '+str(y)
                                    else:
                                        print resultString
                                        resultString = resultString[0]+'at '+str(x)+' '+str(y)
                                        
                                    ship.setSelected(False)
                                    turnType = ""
                                    screen.fill(GRAY);
                                    game.updateRange("cannon", False)
                                    notifier = FONT.render(resultString, 1, (255,255,255))
                                    screen.blit(notifier, (200, WINDOWHEIGHT - 100))
                                    updateBoard(game.getBoard(),screen)
                                    if not offline:
                                        clientsocket.send("Cannon:"+str(shiplist.index(ship))+':'+str(x)+":"+str(y))
                                        turn = False
                                else:
                                    moveValid = False
                                    turnType = ""
                                    game.updateRange("",False)
                                    screen.fill(GRAY);
                
                ## FIRING HEAVY CANNON

                elif turnType == "heavycannon":
                    if event.type == pygame.MOUSEMOTION:
                        x, y = event.pos
                        x = (x - d) / 21
                        y = (y - 10) / 21
                        
                        for ship in shiplist:
                            if ship.isSelected():
                                
                                game.getBoard().paint(screen)

                                if (x,y) in ship.getHeavyCannonRange():
                                    drawWeapon(screen, x, y)

                    elif event.type == pygame.MOUSEBUTTONUP:
                        for ship in shiplist:
                            if ship.isSelected():
                                x, y = event.pos
                                x = (x - d) / 21
                                y = (y - 10) / 21

                                hcrange = firingRange(screen, ship, x, y, "HeavyCannon")

                                #print 'x,y ',x,y
                                if moveValid and x>=0 and x<=29 and y>=0 and y<=29:
                                    resultString = game.fireHeavyCannon(x,y)

                                    resultString = resultString.split(':')
                                    if resultString[0] == 'ship sunk ':
                                        resultString = resultString[0]+':'+resultString[1]+'at '+str(x)+' '+str(y)
                                    else:
                                        print resultString
                                        resultString = resultString[0]+'at '+str(x)+' '+str(y)
                                        
                                    ship.setSelected(False)
                                    turnType = ""
                                    screen.fill(GRAY);
                                    game.updateRange("heavycannon", False)
                                    notifier = FONT.render(resultString, 1, (255,255,255))
                                    #print resultString
                                    screen.blit(notifier, (200, WINDOWHEIGHT - 100))
                                    updateBoard(game.getBoard(),screen)
                                    if not offline:
                                        clientsocket.send("HCannon:"+str(shiplist.index(ship))+':'+str(x)+":"+str(y))
                                        turn = False
                                else:
                                    moveValid = False
                                    turnType = ""
                                    game.updateRange("",False)
                                    screen.fill(GRAY)

                ## FIRING TORPEDO

                elif turnType == "torpedo":
                    if event.type == pygame.MOUSEMOTION:
                        x, y = event.pos
                        x = (x - d) / 21
                        y = (y - 10) / 21
                        
                        for ship in shiplist:
                            if ship.isSelected():
                                
                                game.getBoard().paint(screen)
                                if (x,y) in ship.getTorpedoRange():
                                    drawWeapon(screen, x, y)

                    elif event.type == pygame.MOUSEBUTTONUP:
                        for ship in shiplist:
                            if ship.isSelected():
                                x, y = event.pos
                                x = (x - d) / 21
                                y = (y - 10) / 21
                                torpedoRange(screen, ship, x, y, "Torpedo")

                                if moveValid and x>=0 and x<=29 and y>=0 and y<=29:
                                    resultString = game.fireTorpedo(x,y)

                                    resultString = resultString.split(':')

                                    if resultString[0] == 'ship sunk ':
                                        resultString = resultString[0]+':'+resultString[1]+'at '+str(x)+' '+str(y)
                                    else:
                                        print resultString
                                        resultString = resultString[0]+'at '+str(x)+' '+str(y)

                                    ship.setSelected(False)
                                    turnType = ""
                                    screen.fill(GRAY);
                                    game.updateRange("torpedo", False)
                                    notifier = FONT.render(resultString, 1, (255,255,255))
                                    screen.blit(notifier, (200, WINDOWHEIGHT - 100))
                                    
                                    if not offline:
                                        clientsocket.send("Torpedo:"+str(shiplist.index(ship))+':'+str(x)+':'+str(y))                                   
                                        turn = False
                                else:
                                    moveValid = False
                                    turnType = ""
                                    game.updateRange("",False)
                                    screen.fill(GRAY)
                
                #######################
                ## SETTING TURN TYPES##
                #######################    


                elif 'click' in buttonPositionShips.handleEvent(event) and turnType == "position":
                    positioned = True
                    string = 'Position:'
                    i = 0
                    for s in shiplist:

                        x = str(s.getPositionList()[0][0])
                        y = str(s.getPositionList()[0][1])
                        p = str(s.getOrientation())
                        string = string + str(i)+':'+ x +':'+ y +':'+ p +':Position:'
                        i += 1
                    #print string
                    if not offline: 
                        clientsocket.send(string)
                    if Player1 and op_positioned == True :
                        turn = True
                    else:
                        turn = False

                    turnType = ""


                    screen.fill(GRAY);                                

                elif 'click' in buttonMove.handleEvent(event) and turnType == '' and isSelected:
                    print "clicked move"
                    turnType = "move"

                elif 'click' in kbuttonFire.handleEvent(event) and turnType == '' and isSelected and isKamikaze:
                    print "KAMIKAZE ARMED"
                    armKamikaze = True
                    turnType = "move"
                
                elif 'click' in buttonFire.handleEvent(event) and turnType == '' and isSelected:
                    print "clicked fire"
                    turnType = "fire"
                
                
                    

                elif 'click' in buttonCannon.handleEvent(event) and turnType == 'fire' and cannon and isSelected:
                    turnType = "cannon"
                    game.updateRange("cannon", True)
                    updateBoard(game.getBoard(),screen)


                elif 'click' in buttonHeavyCannon.handleEvent(event) and turnType == 'fire' and hcannon and isSelected:
                    turnType = "heavycannon"
                    game.updateRange("heavycannon", True)
                    updateBoard(game.getBoard(),screen)
                    #print turnType

                elif 'click' in buttonTorpedo.handleEvent(event) and turnType == 'fire'and torpedo and isSelected:
                    turnType = "torpedo"
                    game.updateRange("torpedo", True)
                    updateBoard(game.getBoard(),screen)                    
                        
                elif 'click' in buttonTurn.handleEvent(event) and turnType == '' and isSelected:
                    turnType = "turn"
                    x,y = event.pos
                    x = (x - d) / 21
                    y = (y - 10) / 21
                                
                elif event.type == pygame.MOUSEBUTTONUP:
                    x, y = event.pos
                    x = (x - d) / 21
                    y = (y - 10) / 21
        
                    if ( x >= 0 and x <= 29 and y >= 0 and y <= 29):
                        #print "hi"
                        print game.getBoard().getSquare(x, y).getObjectOn()
                    
                    total = 10
                    for ship in shiplist:
                        #check if ship was clicked
                        if (x,y) in ship.position:
                            for sh in shiplist:
                                sh.setSelected(False)
    
                            ship.setSelected(True)
                            if not positioned:
                                turnType = "positionActive"
                            
                            break;                            
                            total = total - 1
                            
                            
                        #ship was not clicked, take off ship options
                    
                    if total == 0:
                        print "ship not detected"
                    if total == 0 and positioned:
                        screen.fill(GRAY);
                        for sh in shiplist:
                            sh.setSelected(False) 
                                
                if turnType != "move" and turnType != "positionActive" and turnType != "turn" and turnType != "cannon" and turnType != "heavycannon" and turnType != "torpedo":

                    updateBoard(game.getBoard(),screen)
                  
def updateBoard(gameBoard,screen):
    #border
    drawStatPanel(screen, shiplist, op_shiplist)
    drawSelectedPanel(screen, shiplist)
    drawMessagePanel(screen, turn)
    pygame.draw.rect(screen, WHITE, [9,5,641,640])
    pygame.draw.rect(screen, BLACK, [14,9,631,631])
    gameBoard.paint(screen)
    pygame.display.update()

def drawWeapon(surface, x, y):
    c = (27, 201, 18) #green
    pygame.draw.ellipse(surface, c, [x*20 + x*1 + d, y*20 + y*1 + 10, 20, 20], 0)
    pygame.display.update()
    
global pList
def drawShip(surface, ship, x, y, rotation, game,screen):
    global VISIBLE
    VISIBLE = True
    r = rotation
    
    global pList
    pList = ship.getPositionList()
    (x1, y1) = pList[0]
    (x2,y2) = pList[-1]
    
    global moveValid
    moveValid = True
    board = game.getBoard()

    
    radarList = [];
    if (ship.getSubclass() == "Kamikaze" and turnType != "positionActive" ):
        l = ship.getPositionList()
        for x1 in range(l[0][0] - 2, l[0][0] + 3):
            for y1 in range(l[0][1] - 2, l[0][1] + 3):
                radarList.append((x1, y1))
        
        if (x,y) in radarList:
            if (board.getSquare(x,y).getObjectOn() != None ):
                if (board.getSquare(x,y).getObjectOn() == ship):
                    moveValid = True;
                else:
                    moveValid = False;
        else:
            moveValid = False;
            
    
    newOrientation = ship.getOrientation()
    turning = False
    
    global colx 
    global coly 
    colx = -1
    coly = -1

    if rotation != 0 and turnType != "positionActive":
        turning = True

    
    while (rotation > 0):
        if (newOrientation == "E"):
            newOrientation = "S"
            rotation = rotation - 1
        elif (newOrientation == "S"):
            newOrientation = "W"
            rotation = rotation - 1
        elif (newOrientation == "W"):
            newOrientation = "N"
            rotation = rotation - 1
        elif (newOrientation == "N"):
            newOrientation = "E"
            rotation = rotation - 1
    #print newOrientation
    
    
    
    if (newOrientation == "E"):
        if turning:
            
            y0 = y
            x0 = x - ship.getSize() + 1            

            if ship.getTurnRadius() == 1:
                if (x0  == x2 and y0 == y2):
                    #print "r=",r
                    for (i,j) in ship.getTurnZone(r):
                        if (board.getSquare(i,j).getObjectOn() != None ):
                            if(board.getSquare(i,j).getObjectOn() == ship):
                                continue
                            elif (board.getSquare(i,j).getObjectOn().getClassName() == "Coral"):
                                print 'hit coral'
                                VISIBLE = True
                                moveValid = False
                                break
                            elif not board.getSquare(i,j).isVisible():
                                VISIBLE = False
                                colx = i
                                coly = j
                            else:
                                #print "found collision item"
                                colx = i
                                coly = j
                                moveValid = False
                                break
                else:
                    moveValid = False
            
            # if turn radius = 180
            elif ship.getTurnRadius() == 2:
                
                if ship.getOrientation() == "W":
                    x0 = x-2
                    y0 = y
                elif ship.getOrientation() == "N":
 
                    x0 = x- ship.getSize() +2
                    y0 = y- ship.getSize() + 2
                
                else: #facing south'
                    x0 = x- ship.getSize() +2
                    y0 = y+ ship.getSize() -2

                #print x0,x1
                #print y0,y1
                if (x0 == x1 and y0 == y1):
                    #print y,y2
                    i = x
                    while i >= x2-1:
                        #print board.getSquare(i,y).getObjectOn()
                        if (board.getSquare(i,y).getObjectOn() != None ):
                            if(board.getSquare(i,y).getObjectOn() == ship):
                                i-=1
                                continue
                            if not board.getSquare(i,y).isVisible():
                                VISIBLE = False
                                colx = i
                                coly = y
                            else:
                                colx = i
                                coly = y
                                moveValid = False
                                break
                        i-=1
                else:
                    moveValid = False

                if (x0 == x1 and y0 == y1):
                    #print "r=",r
                    #print "AHHH: ", ship.getTurnZone(r)                    
                    for (i,j) in ship.getTurnZone(r):
                        if (board.getSquare(i,j).getObjectOn() != None ):
                            if(board.getSquare(i,j).getObjectOn() == ship):
                                continue
                            elif (board.getSquare(i,j).getObjectOn().getClassName() == "Coral"):
                                print 'hit coral'

                                moveValid = False
                                break
                            elif not board.getSquare(i,j).isVisible():
                                VISIBLE = False
                                colx = i
                                coly = j
                            else:
                                #print "found collision item"
                                colx = i
                                coly = j
                                moveValid = False
                                break
                else:
                    moveValid = False 

                
            #print moveValid
         

        elif  (ship.getSubclass() != "Kamikaze" and turnType != "positionActive" and ((x - x1 ) >= -1 and ( x - x1 ) <= ship.getSpeed() and (y - y1) == 0) or ((y - y1) >= -1 and (y - y1) <= 1 and (x - x1) == 0)):
            i = x1
            # check for obstacles in front
            while i <= x:
                if (board.getSquare(i,y).getObjectOn() != None ):
                    if (board.getSquare(i,y).getObjectOn() == ship):
                        i+=1
                        continue
                    if not board.getSquare(i,y).isVisible():
                        VISIBLE = False
                        colx = i
                        coly = y

                    else:
                        #TODO
                        colx = i
                        coly = y
                        print colx,coly
                        moveValid = False
                        break
                i += 1 
            #check sideways
            if y != y1:
                i = 0
                while i< ship.getSize():
                    if (board.getSquare(x-i,y).getObjectOn() != None):
                        if not board.getSquare(x-i,y).isVisible():
                            VISIBLE = False
                        else:

                            moveValid = False
                            break
                    i+=1
            #check obstacles behind
            elif x-ship.getSize() <= x2-1 :
                if (board.getSquare(x-ship.getSize()+1,y).getObjectOn() != None):
                    if not board.getSquare(x-ship.getSize()+1,y).isVisible():
                        VISIBLE = False
                    else:
                        colx = x-ship.getSize()+1
                        coly = y
                        moveValid = False

        
        elif (turnType == "positionActive" and Player1 and x >= (ship.getSize() - 1) and x <= 14 and y >= 0 and y <= 29):
            i = x-ship.getSize() +1        
            while i <= x:
                #print board.getSquare(i,y).getObjectOn()
                
                if(board.getSquare(i,y).getObjectOn()!= None):
                    if (board.getSquare(i,y).getObjectOn()== ship):
                        i+=1
                        continue
                    
                    moveValid = False
                    break
                i+=1
        elif (turnType == "positionActive" and not Player1 and x <= 29 and x > 14 + ship.getSize() -1 and y >= 0 and y <= 29):
            i = x-ship.getSize() +1        
            while i <= x:
                #print board.getSquare(i,y).getObjectOn()
                
                if(board.getSquare(i,y).getObjectOn()!= None):
                    if (board.getSquare(i,y).getObjectOn()== ship):
                        i+=1
                        continue
                    
                    moveValid = False
                    break
                i+=1
                
        elif (turnType == "positionActive" and ship.getSubclass() == 'Kamikaze'):
            moveValid = False    
        elif ship.getSubclass() != 'Kamikaze':
            moveValid = False
            
        if moveValid == True:
            color = pygame.Color(194, 242, 221) #green
        else:
            color = pygame.Color(250, 200, 200) #red
        
        #print "Drawing", (x,y)
        
        
        if (ship.getSubclass() != "Kamikaze"):
            pygame.draw.polygon(surface, color, [(x*20 + x*1 + d , y*20 + y*1 + 10), (x*20 + x*1 + d, y*20 + y*1 + 29), (x*20 + x*1 + d+20 - 1, y*20 + y*1 + 20)], 0)
            x = x - 1
        else:
            pygame.draw.rect(surface, color, [x*20 + x*1 + d, y*20 + y*1 + 10, 20, 20])
 
        for i in range(ship.getSize() - 1):

            pygame.draw.rect(surface, color, [x*20 + x*1 + d, y*20 + y*1 + 10, 20, 20])
            x = x - 1
            i = i + 1
            
    elif (newOrientation == "W"):
        if turning:
            #print ship.getPositionList()
            
            y0 = y
            x0 = x + ship.getSize() - 1            

            #print x0,x2
            #print y0,y2
            if ship.getTurnRadius() == 1:
                if (x0  == x2 and y0 == y2):
                    #print "r=",r
                    for (i,j) in ship.getTurnZone(r):
                        if (board.getSquare(i,j).getObjectOn() != None ):
                            if(board.getSquare(i,j).getObjectOn() == ship):
                                continue
                            elif (board.getSquare(i,j).getObjectOn().getClassName() == "Coral"):
                                print 'hit coral'
                                VISIBLE = True
                                moveValid = False
                                break
                            elif not board.getSquare(i,j).isVisible():
                                VISIBLE = False
                                colx = i
                                coly = j
                            else:
                                #print "found collision item"
                                colx = i
                                coly = j
                                moveValid = False
                                break
                else:
                    moveValid = False

            # if turn radius = 180
            elif ship.getTurnRadius() == 2:
                
                if ship.getOrientation() == "E":
                    x0 = x+2
                    y0 = y



                elif ship.getOrientation() == "N":
 
                    x0 = x + ship.getSize() -2
                    y0 = y - ship.getSize() + 2
                
                else: #facing south'
                    x0 = x + ship.getSize() - 2
                    y0 = y + ship.getSize() - 2

                #print 'x ', x0,x1
                #print 'y' , y0,y1
                if (x0 == x1 and y0 == y1):
                    #print x,x2+1
                    #print y
                    i = x2+1
                    while i >= x:
                        #print board.getSquare(i,y).getObjectOn()
                        if (board.getSquare(i,y).getObjectOn() != None ):
                            if(board.getSquare(i,y).getObjectOn() == ship):
                                i-=1
                                continue
                            if not board.getSquare(i,y).isVisible():
                                VISIBLE = False
                                colx = i
                                coly = y
                            else:
                                colx = i
                                coly = y
                                moveValid = False
                            break
                        i-=1
                else:
                    moveValid = False
                if (x0 == x1 and y0 == y1):
                    #print "r=",r
                    #print "AHHH: ", ship.getTurnZone(r)                    
                    for (i,j) in ship.getTurnZone(r):
                        if (board.getSquare(i,j).getObjectOn() != None ):
                            if(board.getSquare(i,j).getObjectOn() == ship):
                                continue
                            elif (board.getSquare(i,j).getObjectOn().getClassName() == "Coral"):
                                print 'hit coral'
                                moveValid = False
                                VISIBLE = True
                                break
                            elif not board.getSquare(i,j).isVisible():
                                VISIBLE = False
                                colx = i
                                coly = j
                            else:
                                colx = i
                                coly = j
                                moveValid = False
                                break
                else:
                    moveValid = False    

  

            if moveValid != False:
                color = pygame.Color(194, 242, 221) #green
        elif  ship.getSubclass() != "Kamikaze" and turnType != "positionActive" and ((x - x1 ) <= 1 and ( x - x1 ) >= -ship.getSpeed() and (y - y1) == 0) or ((y - y1) >= -1 and (y - y1) <= 1 and (x - x1) == 0): 
            i = x
            # check for obsticals
            while i <= x1:
                if (board.getSquare(i,y).getObjectOn() != None ):
                    if (board.getSquare(i,y).getObjectOn() == ship):
                        i+=1
                        continue
                    if not board.getSquare(i,y).isVisible():
                        VISIBLE = False
                        colx = i
                        coly = y
                    else:
                        colx = i
                        coly = y
                        print colx,coly
                        moveValid = False
                    break
                i += 1
            # side ways movement
            if y != y1:
                i = 0
                while i< ship.getSize():
                    if (board.getSquare(x+i,y).getObjectOn() != None):
                        color = pygame.Color(250, 200, 200) #red
                        if not board.getSquare(x+i,y).isVisible():
                            VISIBLE = False
                        else:
                            
                            moveValid = False
                        break
                    i+=1 
            #check obstacles behind
            elif x+ship.getSize() >= x2+1 :
                if (board.getSquare(x+ship.getSize()-1,y).getObjectOn() != None):
                    if not board.getSquare(x+ship.getSize()-1,y).isVisible():
                        VISIBLE = False
                        colx = x+ship.getSize()-1
                        coly = y
                    else:
                        colx = x+ship.getSize()-1
                        coly = y
                        moveValid = False
            

        elif turnType == "positionActive" and Player1 and x <= 14 - ship.getSize() + 1 and x >= 0 and y >= 0 and y <= 29:      
            color = pygame.Color(194, 242, 221)
            
            moveValid = True
            i = x + ship.getSize() -1
            
            while i >= x:
                if (board.getSquare(i,y).getObjectOn()!= None):
                    if (board.getSquare(i,y).getObjectOn() == ship):
                        i-=1
                        continue
                    
                    moveValid = False
                    break
                i-=1
        elif turnType == "positionActive" and not Player1 and x > 14  and x <= 29 - ship.getSize() +1 and y >= 0 and y <= 29:      
            color = pygame.Color(194, 242, 221)
            
            moveValid = True
            i = x + ship.getSize() -1
            
            while i >= x:
                #print board.getSquare(i,y).getObjectOn()
                if (board.getSquare(i,y).getObjectOn()!= None):
                    if (board.getSquare(i,y).getObjectOn() == ship):
                        i-=1
                        continue
                    
                    moveValid = False
                    break
                i-=1
            #print moveValid
   

                        
        else:
            moveValid = False
        
        if moveValid == True:
            color = pygame.Color(194, 242, 221) #green
        else:
            color = pygame.Color(250, 200, 200) #red
        
        
        
        #print "Drawing w", (x,y)
        if (ship.getSubclass() != "Kamikaze"):
            pygame.draw.polygon(surface, color, [(x*20 + x*1 + d + 19, y*20 + y*1 + 10), (x*20 + x*1 + d + 19, y*20 + y*1 + 29), (x*20 + x*1 + d, y*20 + y*1 + 20)], 0)      
            x = x + 1
        else:
            pygame.draw.rect(surface, color, [x*20 + x*1 + d, y*20 + y*1 + 10, 20, 20])
            
        for i in range(ship.getSize() - 1):
            pygame.draw.rect(surface, color, [x*20 + x*1 + d, y*20 + y*1 + 10, 20, 20])
            x = x + 1
            i = i + 1
        
    elif (newOrientation == "S"):
        if turning:
            if ship.getTurnRadius() == 1:
                if ship.getOrientation() == "W":
                    #print x 
                    x0 = x- ship.getSize() +1
                    y0 =y- ship.getSize() + 1
                else:
                    x0 = x + ship.getSize() -1
                    y0 = y- ship.getSize() + 1

                if (x0  == x1 and y0 == y1):
                    #print "r=",r
                    for (i,j) in ship.getTurnZone(r):
                        if (board.getSquare(i,j).getObjectOn() != None ):
                            if(board.getSquare(i,j).getObjectOn() == ship):
                                continue
                            elif (board.getSquare(i,j).getObjectOn().getClassName() == "Coral"):
                                print 'hit coral'
                                VISIBLE = True

                                moveValid = False
                                break
                            elif not board.getSquare(i,j).isVisible():
                                VISIBLE = False
                                colx = i
                                coly = j
                            else:
                                #print "found collision item"
                                colx = i
                                coly = j
                                moveValid = False
                                break
                else:
                    moveValid = False
            
            # ships that can move 180

            elif ship.getTurnRadius() == 2:
                if ship.getOrientation() == "N":
                    #print "NORTH"
                    x0 = x
                    y0 = y-2

                    #print 'x', x0,x1
                    #print 'y', y0,y1

                elif ship.getOrientation() == "W":
                    #print x 
                    x0 = x- ship.getSize() +2
                    y0 = y- ship.getSize() + 2
                else:
                    x0 = x + ship.getSize() -2
                    y0 = y- ship.getSize() + 2

                if (x0 == x1 and y0 == y1):
                    #print y,y2
                    i = y
                    while i >= y2-1:
                        if (board.getSquare(x,i).getObjectOn() != None ):
                            if(board.getSquare(x,i).getObjectOn() == ship):
                                i-=1
                                continue
                            if not board.getSquare(i,y).isVisible():
                                VISIBLE = False
                                colx = x
                                coly = i
                            else:
                                colx = x
                                coly = i
                                moveValid = False
                            break
                        i-=1
                else:
                    moveValid = False
                if (x0 == x1 and y0 == y1):
                    #print "r=",r
                    #print "AHHH: ", ship.getTurnZone(r)                    
                    for (i,j) in ship.getTurnZone(r):
                        if (board.getSquare(i,j).getObjectOn() != None ):
                            if(board.getSquare(i,j).getObjectOn() == ship):
                                continue
                            elif (board.getSquare(i,j).getObjectOn().getClassName() == "Coral"):
                                print 'hit coral'
                                VISIBLE = True

                                moveValid = False
                                break
                            elif not board.getSquare(i,j).isVisible():
                                VISIBLE = False
                                colx = i
                                coly = j
                            else:
                                #print "found collision item"
                                colx = i
                                coly = j
                                moveValid = False
                                break
                else:
                    moveValid = False 
            if moveValid != False:
                color = pygame.Color(194, 242, 221) #green

        elif ship.getSubclass() != "Kamikaze" and turnType != "positionActive" and (( x - x1 ) == 0 and (y - y1) >= -1 and (y - y1) <= ship.getSpeed()) or (abs(( x - x1 )) == 1 and (y - y1) ==0) : 
            
            # check for obstacle
            i = y1
            while i <= y:
                if (board.getSquare(x,i).getObjectOn() != None ):
                    #print board.getSquare(x,i).getObjectOn() 
                    if (board.getSquare(x,i).getObjectOn() == ship):
                        i+=1
                        continue
                    elif not board.getSquare(x,i).isVisible():
                        VISIBLE = False
                        colx = x
                        coly = i
                    else:
                        colx = x
                        coly = i
                        moveValid = False
                    break
                i += 1
            if x != x1:
                i = 0
                while i< ship.getSize():
                    if (board.getSquare(x,y-i).getObjectOn() != None):
                        if not board.getSquare(x,y-i).isVisible():
                            VISIBLE = False
                        else:
                            moveValid = False
                        break
                    i+=1
            #check obstacle behind
            elif y-ship.getSize() <= y2-1 :
                if (board.getSquare(x,y-ship.getSize()+1).getObjectOn() != None):
                    if not board.getSquare(x,y-ship.getSize()+1).isVisible():
                        VISIBLE = False
                        colx = x
                        coly = y-ship.getSize()+1
                    else:
                        colx = x
                        coly = y-ship.getSize()+1
                        moveValid = False
    
        
        elif turnType == "positionActive" and Player1 and x >= 0 and x <= 14 and y >= ship.getSize()-1 and y <= 29:

            color = pygame.Color(194, 242, 221)
            moveValid = True
            #print 'y ',y
            i = y - ship.getSize() +1
            
            while i <= y:
                #print board.getSquare(x,i).getObjectOn()
                
                if(board.getSquare(x,i).getObjectOn()!= None):
                    if (board.getSquare(x,i).getObjectOn()== ship):
                        i+=1
                        continue
                    color = pygame.Color(250, 200, 200) #red
                    moveValid = False
                    break
                i+=1
        elif turnType == "positionActive" and not Player1 and x > 14 and x <= 29 and y >= ship.getSize()-1 and y <= 29:

            color = pygame.Color(194, 242, 221)
            moveValid = True
            #print 'y ',y
            i = y - ship.getSize() +1
            
            while i <= y:
                #print board.getSquare(x,i).getObjectOn()
                
                if(board.getSquare(x,i).getObjectOn()!= None):
                    if (board.getSquare(x,i).getObjectOn()== ship):
                        i+=1
                        continue
                    color = pygame.Color(250, 200, 200) #red
                    moveValid = False
                    break
                i+=1
        else:
            moveValid = False 
            
        if moveValid == True:
            color = pygame.Color(194, 242, 221) #green
        else:
            color = pygame.Color(250, 200, 200) #red

        #print "Drawing s", (x,y)

        if (ship.getSubclass() != "Kamikaze"):
            pygame.draw.polygon(surface, color, [(x*20 + x*1 + d, y*20 + y*1 + 10), (x*20 + x*1 + d + 19, y*20 + y*1 + 10), (x*20 + x*1 + d + 10, y*20 + y*1 + 29)], 0)
            y = y - 1
        else:
            pygame.draw.rect(surface, color, [x*20 + x*1 + d, y*20 + y*1 + 10, 20, 20])
 
        for i in range(ship.getSize() - 1):
            pygame.draw.rect(surface, color, [x*20 + x*1 + d, y*20 + y*1 + 10, 20, 20])
            y = y - 1
            i = i + 1
            
    elif (newOrientation == "N"):
        if turning:
            #print "PASSED ", (x,y)
            moveValid = True
            color = pygame.Color(250, 200, 200) #red

            if ship.getTurnRadius() == 1:

                if ship.getOrientation() == "W":
                    #print x 
                    x0 = x- ship.getSize() +1
                    y0 = y+ ship.getSize() - 1
                else:
                    x0 = x + ship.getSize() -1
                    y0 = y+ ship.getSize() - 1

                if (x0 == x1 and y0 == y1):
                    #print "r=",r
                    for (i,j) in ship.getTurnZone(r):
                        if (board.getSquare(i,j).getObjectOn() != None ):
                            if(board.getSquare(i,j).getObjectOn() == ship):
                                continue
                            elif (board.getSquare(i,j).getObjectOn().getClassName() == "Coral"):
                                print 'hit coral'
                                VISIBLE = True
                                moveValid = False
                                break
                            elif not board.getSquare(i,j).isVisible():
                                VISIBLE = False
                                colx = i
                                coly = j
                            else:
                                #print "found collision item"
                                colx = i
                                coly = j
                                moveValid = False
                                break
                else:
                    moveValid = False
            
            # ships that can do 180
            elif ship.getTurnRadius() == 2:
                
                if ship.getOrientation() == "S":
                    #print "SOUTH"
                    x0 = x
                    y0 = y+2

                    #print 'x', x0,x1
                    #print 'y', y0,y1
                elif ship.getOrientation() == "W":
                    x0 = x- ship.getSize() +2
                    y0 = y+ ship.getSize() - 2
                else:
                    x0 = x + ship.getSize() -2
                    y0 = y+ ship.getSize() - 2

                #print 'x ',x0 , x1
                #print 'y ',y+ ship.getSize() - 2,y1
                if (x0 == x1 and y0 == y1):
                    #print y,y2
                    i = y2+1
                    while i >= y:
                        if (board.getSquare(x,i).getObjectOn() != None ):
                            if(board.getSquare(x,i).getObjectOn() == ship):
                                i-=1
                                continue
                            if not board.getSquare(i,y).isVisible():
                                VISIBLE = False
                                colx = x
                                coly = i
                            else:
                                colx = x
                                coly = i
                                moveValid = False
                            break
                        i-=1
                else:
                    moveValid = False

                if (x0 == x1 and y0 == y1):
                    #print "r=",r
                    #print "AHHH: ", ship.getTurnZone(r)                    
                    for (i,j) in ship.getTurnZone(r):
                        if (board.getSquare(i,j).getObjectOn() != None ):
                            if(board.getSquare(i,j).getObjectOn() == ship):
                                continue
                            elif (board.getSquare(i,j).getObjectOn().getClassName() == "Coral"):
                                print 'hit coral'
                                VISIBLE = True
                                moveValid = False
                                break
                            elif not board.getSquare(i,j).isVisible():
                                VISIBLE = False
                                colx = i
                                coly = j
                            else:
                                #print "found collision item"
                                colx = i
                                coly = j
                                moveValid = False
                                break
                else:
                    moveValid = False  
           
        elif ship.getSubclass() != "Kamikaze" and turnType != "positionActive" and (( x - x1 ) == 0 and (y1 - y) >= -1 and (y1 - y) <= ship.getSpeed()) or (abs(( x - x1 )) == 1 and (y - y1) ==0) : 
            # check for obsticals
            i = y
            while i <= y1:
                if (board.getSquare(x,i).getObjectOn() != None ):
                    if (board.getSquare(x,i).getObjectOn() == ship):
                        i+=1
                        continue
                    if not board.getSquare(i,y).isVisible():
                        VISIBLE = False
                        colx = x
                        coly = i
                    else:
                        colx = x
                        coly = i
                        moveValid = False
                    break
                i += 1
            if x != x1:
                i = 0
                while i< ship.getSize():
                    if (board.getSquare(x,y+i).getObjectOn() != None):
                        if not board.getSquare(i,y+i).isVisible():
                            VISIBLE = False
                        else:
                            moveValid = False
                        break
                    i+=1 
            
            #check obsticals behind
            elif y+ship.getSize() >= y2+1 :
                if (board.getSquare(x,y+ship.getSize()-1).getObjectOn() != None):
                    if not board.getSquare(i,y+ship.getSize()-1).isVisible():
                        VISIBLE = False
                    else:
                        colx = x
                        coly = ship.getSize()-1
                        moveValid = False
    
 
        elif turnType == "positionActive" and Player1 and x >= 0 and x <= 14 and y >= 0 and y <= 29 - ship.getSize() + 1:
            color = pygame.Color(194, 242, 221)
            moveValid = True
            
            i = y + ship.getSize()-1
            #print 'i',i
            while i > y:
                if (board.getSquare(x,i).getObjectOn()!= None):
                    if (board.getSquare(x,i).getObjectOn() == ship):
                        i-=1
                        continue
                    
                    color = pygame.Color(250, 200, 200) #red
                    moveValid = False
                    break
                i-=1
        
        elif turnType == "positionActive" and not Player1 and x > 14 and x <= 29 and y >= 0 and y <= 29 - ship.getSize() + 1:
            color = pygame.Color(194, 242, 221)
            moveValid = True
            
            i = y + ship.getSize()-1
            #print 'i',i
            while i > y:
                if (board.getSquare(x,i).getObjectOn()!= None):
                    if (board.getSquare(x,i).getObjectOn() == ship):
                        i-=1
                        continue
                    
                    color = pygame.Color(250, 200, 200) #red
                    moveValid = False
                    break
                i-=1

        else:
            moveValid = False
            
        if moveValid == True:
            color = pygame.Color(194, 242, 221) #green
        else:
            color = pygame.Color(250, 200, 200) #red

        #print "Drawing n", (x,y)

       
            



        if (ship.getSubclass() != "Kamikaze"):
            pygame.draw.polygon(surface, color, [(x*20 + x*1 + d, y*20 + y*1 + 29), (x*20 + x*1 + d + 19, y*20 + y*1 + 29), (x*20 + x*1 + d + 9, y*20 + y*1 + 10)], 0)
            y = y + 1
        else:
            pygame.draw.rect(surface, color, [x*20 + x*1 + d, y*20 + y*1 + 10, 20, 20])
 
        for i in range(ship.getSize() - 1):
            pygame.draw.rect(surface, color, [x*20 + x*1 + d, y*20 + y*1 + 10, 20, 20])
            y = y + 1
            i = i + 1


    if not VISIBLE:
        print "COLLISION BUT NOT VISIBLE"
    print "VALID MOVE: ", moveValid
    print "VISIBLE", VISIBLE
    print "turntype: ",turnType
    pygame.display.update()
    
def firingRange(surface, ship, x, y, weaponType):
    global moveValid
    pList = ship.getPositionList()
    size = ship.getSize()
    (x1, y1) = pList[0]
    (x2, y2) = pList[size - 1]
    weaponList = ship.getWeaponList()
    i = 0
    for weapon in weaponList:
        if weapon.getSubclass() == weaponType:
            #print weapon.getSubclass()
            break
        else:
            i = i + 1
    weapon = weaponList[i]
    xRange = weapon.getRangeX()
    yRange = weapon.getRangeY()
    tuple = (xRange, yRange)

    if (ship.getOrientation() == "N" or ship.getOrientation() == "S"):
        if (abs(x - x1) <= (yRange - 1)/2) and (abs(y - y1) <= (xRange - size)/2 or abs(y - y2) <= (xRange - size)/2):
            moveValid = True
        else:
            moveValid = False
    elif (ship.getOrientation() == "E" or ship.getOrientation() == "W"):
        if (abs(x - x1) <= (xRange - size)/2 or abs(x - x2) <= (xRange - size)/2) and (abs(y - y1) <= (yRange - 1)/2 or abs(y - y2) <= (yRange - size)/2):
            moveValid = True
        else:
            moveValid = False
    return tuple

def torpedoRange(surface, ship, x, y, weaponType):
    global moveValid
    pList = ship.getPositionList()
    (x1, y1) = pList[0]
    weaponList = ship.getWeaponList()
    i = 0
    for weapon in weaponList:
        if weapon.getSubclass() == weaponType:
            break
        else:
            i = i + 1
    
    weapon = weaponList[i]
    xRange = weapon.getRangeX()
    yRange = weapon.getRangeY()    
    
    if (ship.getOrientation() == "N"):
        if ((y1-y) <= yRange and y < y1 and y >= 0 and y <= 29 and x == x1 and y):
            moveValid = True
        else:
            moveValid = False
    elif (ship.getOrientation() == "S"):
        if ((y-y1) <= yRange and y > y1 and y >= 0 and y <= 29 and x == x1 and y):
            moveValid = True
        else:
            moveValid = False        
    elif (ship.getOrientation() == "E"):
        if ((x-x1) <= xRange and x > x1 and x >= 0 and x <= 29 and y == y1):
            moveValid = True
        else:
            moveValid = False 
    elif (ship.getOrientation() == "W"):
        if ((x1-x) <= xRange and x < x1 and x >= 0 and x <= 29 and y == y1):
            moveValid = True
        else:
            moveValid = False            

if __name__ == '__main__':
    global offline
    offline = True
    # main('')
    main('offline',1,1,True,[])
